Windows Registry

HKEY_Local_Machine (HIVE)
              ├──SOFTWARE (Key)
              ├──BCD00000 (Key)
              ├──HARDWARE (Key)
              └──SYSTEM   (Key)
                      └──RegisteredApplications (Subkey)
                                        ├── File Explorer : Data (value)
                                        ├── Paint : Data (value)
                                        └──Wordpad : Data (value)

There are five Registry Hives

HKEY_LOCAL_MACHINE *
	System Configurations, Run on start up etc.
		HARDWARE - contains a database of installed devices along with their drivers
	
		SAM - Security Account Manager stores user and group accounts along with NTLM hashes of passwords

		Security - Local Security policy accessed by lsass.exe used to determine rights and permissions for users on the machine

		System - Contains keys pertaining to system startup such as programs started on boot or driver load order.

HKEY_USERS *
	User profile information, one key per user, keys named after SID's.			
		User Environment settings for the desktop				

		Shortcuts

		File associations			
SIDS
	S-1-5-18 refers to LocalSystem account.

	S-1-5-19 refers to LocalService account. It is used to run local services that do not require LocalSystem account.

	S-1-5-20 refers to NetworkService account. It is used to run network services that do not require LocalSystem account.

	S-1-5-21-domain-500 Refers to the built in local administrator account.
	500 = Admin, 501 = Guest, Start of created users = 1000

HKEY_CURRENT_USER
	Uses pointers or shortcut to HKU by the SID


HKEY_CURRENT_CONFIG
	Current set up of HKLM 


HKEY_CLASSES_ROOT

Registry Path Hive and Supporting Files
HKLM\SAM SAM, SAM.LOG

HKLM\SECURITY SECURITY, SECURITY.LOG

HKLM\SOFTWARE software, software.LOG, software.sav

HKLM\SYSTEM system, system.LOG, system.sav

HKLM\HARDWARE (Dynamic/Volatile Hive)

HKU\.DEFAULT default, default.LOG, default.sav 

HKU\SID NTUSER.DAT **

HKU\SID_CLASSES UsrClass.dat, UsrClass.dat.LOG
	
PWSH Access to registry
	cd REGISTRY::<Key/Hive>

3 PWSH COMMANDS TO KNOW
get-item (Shows values inside of keys)
get-childitem (Shows subkeys)
get-itemproperty 

net use * http://live.sysinternals.com

Registry locations that can be utilized for persistence

	HKLM\Software\Microsoft\Windows\CurrentVersion\Run

	HKLM\Software\Microsoft\Windows\CurrentVersion\RunOnce

	HKU\<SID>\Software\Microsoft\Windows\CurrentVersion\Run

	HKU\<SID>\Software\Microsoft\Windows\CurrentVersion\RunOnce

	HKLM\SYSTEM\CurrentControlSet\services

	HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Shell Folders

	HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\User Shell Folders

	HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon


Windows Alternate Data Streams

 query ADS
	CMD: more <, dir /R
	PWSH: Get-Item reminder.txt -Stream * (See if there IS a stream), Get-Content ./test.txt -Stream secret.vbs (See what it actually is)


Windows Boot Process

winload.exe = BIOS, winload.efi = UEFI

CMD
bcdedit

Windows System Initialization 
	
	Loading the Operating System Kernel

	Initializing the Kernel

	Starting Subsystems

	Starting Session 0

	Starting Session 1

Ntoskrnl.exe
	Loads the Windows Registry

	Loads device drivers

	Starts the system pagefile located at C:\pagefile.sys

	Loads hal.dll

		hal.dll provides abstraction between hardware interfaces and Ntoskrnl.exe

System always has PID of 4

smss.exe
	Loads environmental variables like %APPDATA% and %COMPUTERNAME%

	Populates the pagefile located in C:\pagefile.sys

	Starts the kernel and user mode sub systems.

	Starts a csrss.exe to manage processes and threads for each User Subsystem.


Session 0
	smss.exe installs the Win32 subsystem kernel and user mode components (win32k.sys - kernel; winsrv.dll - user; and csrss.exe - user.)

	csrss.exe - The Client/Server Runtime Subsystem supports process / thread creation and management.

	wininit.exe marks itself as critical, initializes the Windows temp directory, loads the rest of the registry, and starts user mode 	scheduling. It also installs programs that require a reboot to finish the install process. It also starts:

	lsm.exe - the Local Session Manager (LSM) handles all sessions of a system (both remote desktop sessions and local system sessions.)

	lsass.exe - the Local Security Authority Subsystem (LSASS) provides user authentication services, manages the local security policy, and 	generates access tokens.

	services.exe the Services Control Manager (SCM) loads AutoStart services, using LSASS to authenticate if they run as something other 	than System.

	wininit.exe then waits for system shutdown to undo everything it started.

Session 1
	Spawn a Session 1 ( or higher) csrss.exe

	Spawn Winlogon.exe which by default prompts for credentials with logonui.exe

	Spawn userinit.exe which creates an account token and creates a custom environment

	Spawn explorer.exe as the customized graphical environment.


bcdedit /deletevalue {current} safeboot (1. Deletes Safeboot value)
bcdedit /set {bootmgr} timeout 29 (2. Changes Timeout value)

Linux Boot Process

Master Boot Record Layout

	The first 512 bytes of a hard drive contains the Master Boot Record. It contains the following information:

	Bootstrap Code

	Partition entry 1 (16 bytes each partition) 

	Partition entry 2
	
	Partition entry 3

	Partition entry 4

	Boot signature

COMMANDS FOR READING MBR
	xxd
	dd
	EX: lsblk, sudo xxd -l 512 -g 1 /dev/vda, dd if=/dev/vda of=MBRcopy bs=512 count=1
GPT (GUID Partition Tables)
	GPT Only works with UEFI Firmware

	GPT has many boot sectors stored around the disk as redundancy so an issue in one will not deadline the entire machine

	GPT supports 128(and more depending on Operating System) separate physical partitions, while MBR supports only 4

	GPT Supports partitions up to 9 zettabytes. Which is ridiculous.

First Stage Boot Loaders
	MBR and GPT

Second Stage Boot Loader: GRUB
	On BIOS Systems using MBR
		Stage 1 : boot.img located in the first 440 bytes of the MBR loads…​

		Stage 1.5 : core.img located in the MBR between the bootstrap and first partition. It loads…​

		Stage 2 : /boot/grub/i386-pc/normal.mod which loads the grub menu and then reads

		/boot/grub/grub.cfg Which displays a list of Linux kernels available to load on the system

	On UEFI Systems using GPT
		Stage 1 : grubx64.efi Located on an EFI partition or in /boot loads…​

		Stage 2 : /boot/grub/x86_64-efi/normal.mod

		/boot/grub/grub.cfg Which displays a list of Linux kernels available to load on the system

		GRUB 2 Chain Loading Process Resource 1	

Kernel
	Heart of the OS

	Monolithic Kernel
		System calls all functionality to the user such as CPU scheduling, memory management, and file management. A systemcall is a way in which a program requests services from the kernel. Everything that occurs on the system occurs through a systemcall
	
	Witness a system call command: ltrace -S cat /etc/passwd

	 
	Modular
		Modules are extensions to base functionality of the Linux Operating System. This modularity allows for modifications baseline system functionality without rebuilding the kernel and failures will not stop the machine from starting.

Init
	The kernel, once loaded, is hard coded to reach out and execute /sbin/init. This starts the process of bringing the system to a desired level of functionality using Initialization Daemons. There are two main initialization daemons now : Systemd and SysV.	

		Run Levels
			0 Halt
			1 Single User
			2 Multi-User
			3 Multi-User with Netowrking
			4 Not used/user-definable
			5 Multi-User, Networking with a GUI
			6 Reboot

	/etc/init - Configuration of init
	/etc/inittab - all config info for run levels ( init 6, 0, etc.)
	sbin/nit - Binary of init

Target Units 
	command - cat /lib/systemd/system/default.target | tail -n 8

	Systemd target units are a set of value=data pairs to create processes in a set order on the system. But, they are simple to understand at a functional level by understanding the value=data fields within each.

Service Units
	Service units create processes when called by target units. They, much like target units, have value=data pairs that determine what the unit does.

/etc/environment
	global variables

/etc/profile 
	/etc/profile is a script that executes whenever a user logs into an interactive shell on Linux. its functionality depends entirely on the version of Linux being used. Ubuntu Linux uses it to set the BASH shell prompt by executing /etc/bash.bashrc and execute any script named *.sh in /etc/profile.d.
	 it executes every time a user logs in interactively; therefore, when the file is modified logging out then in again will apply the changes.

Windows Process Validity
	-AcceptEULA

Linux Process Validity
	ps -elf (snapshot)
	top, htop (live view)

	For user-space processes /sbin/init ( PID = 1 )

	For kernel-space processes [kthreadd] ( PID = 2 )
	
	ps -elf --forest #Displays processes in an ASCII tree

	Check status/start/stop/restart a service on sysV
		service <servicename> status/start/stop/restart

	Check status/start/stop/restart a service on systemd
		systemctl status <servicename.service> (or pid)
		systemctl start/stop/restart <servicename.service>

Windows Auditing And Logging
	Get-LocalUser | select Name,SID
	wmic UserAccount get name,sid

	The GUID represents a particular file extension.
		CEBFF5CD-ACE2-4F4F-9178-9926F41749EA A list of applications, files, links, and other objects that have been accessed
		F4E57C4B-2036-45F0-A9AB-443BCFE33D9F Lists the Shortcut Links used to start programs

	Location of BAM
		Show in Reg Edit:
			HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\bam\State\UserSettings #On 1809 and Newer
			HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\bam\UserSettings #On 1803 and below

	Recycle Bin
		$RXXXXXX - content of deleted files
		$IXXXXXX - original PATH and name

	Audit Policy
		auditpol /get /category:* 
		auditpol /set /subcategory:"File System"

	Event Logs
		*.evtx files accessed by:

		Windows Event View Application

		Get-Eventlog or Get-WinEvent in Powershell

		wevtutil in Command Prompt

	View Event Logs in Powershell
		PS C:\> Get-EventLog -LogName System -Newest 10 

Linux Auditing and Logging
	 Filtering logs by Boot
		journalctl --list-boots
	Filtering Logs by a specific unit
		journalctl -u ssh.service
	Filtering Logs since a specific time period
		journalctl -u ssh.service --since "2 days ago"

	Xpath Syntax: xpath -q -e '//element/@attribute' file.xml

	freeformatter.com
	xpather.com

	 https://jsonformatter.org/json-pretty-print

Filtering for only comments in /etc/passwd : cut -d: -f5 /etc/passwd

TEST NOTES
	Windows Persistence
		Registry Keys 
		Scheduled Tasks
		Powershell Profiles: Get-Content $PROFILE.AllusersAllhosts
		Malicous Ports: netstat, repeating numbers, sequential numbers
		Artifacts: BAM, recycle bin, etc
		Logs
		Services: Get-Ciminstance Win32_service 
	Linux Persistence
		Cron Jobs:  /var/spool/cron, /etc/cron.d, /etc/crontab
		Processes/Daemons: ps -elf
		Bash Profiles: .bashrc
		Ports
		Logs
		Symbolic Links: ls -l
